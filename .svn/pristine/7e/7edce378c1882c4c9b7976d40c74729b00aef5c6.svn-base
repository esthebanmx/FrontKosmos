/* eslint-disable no-unused-vars */
/* eslint-disable max-len */
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { Button, Modal, Menu, Drawer, Row, Col, Space, Tooltip } from 'antd';
import Icon, { UserOutlined, QuestionOutlined, CloseCircleFilled } from '@ant-design/icons';
import { ReactComponent as UserIcon } from '../../assets/images/usuario.svg';
import { ReactComponent as HelpIcon } from '../../assets/images/question.svg';
import { LoginForm } from '../LoginForm/LoginForm';
import Logo from '../../assets/images/logoINE_bco.svg';
import {
  selectUserInfo,
  isUserAuthenticated,
  selectSelectedRole,
} from '../../selectors/auth.selector';
// import './Header.less';
import './Header.scss';
import { logout } from '../../actions/auth.actions';
import * as routes from '../../constants/routes';
import { no_auth } from '../../reducers/auth-reducer';
import MainMenu from '../MainMenu/MainMenu';
import { authenticatedState } from '../../reducers/auth-reducer';

// import NavBar from '../NavBar/NavBar';
// import { ReactComponent as MenuIcon } from '../../assets/images/menu.svg';

function Header() {

  // const userInfo = useSelector(selectUserInfo);
  // const selectedRole = useSelector(selectSelectedRole);
  // const isAutenticated = useSelector(isUserAuthenticated);

  // const authenticated = useSelector((state) => state.authenticated);
  const authenticated = useSelector(authenticatedState);

  const navigate = useNavigate();

  const dispatch = useDispatch();

  const [openDrawer, setOpenDrawer] = useState(false);
  const [isLoginVisible, setIsLoginVisible] = useState(false);

  // const selectHeaderStyle = () => {
  //   if (!isAutenticated) {
  //     return '';
  //   }
  //   return 'header-section-collapsed';
  // };

  // Events
  const onCloseModal = () => {
    setIsLoginVisible(false);
  };
  const onLogOut = async () => {
    // dispatch(logout());
    // navigate(routes.PUBLIC_HOME);
    navigate("/");
    dispatch(no_auth());
  };
  const onLogIn = () => {
    setIsLoginVisible(true);
  };

  // const rolSelectedItems = [
  //   {
  //     key: 1,
  //     label: (
  //       <Button
  //         className="header-button"
  //         type="text"
  //         icon={<Icon component={<UserOutlined />} style={{ fontSize: '25px' }} />}
  //       >
  //         {userInfo?.username}
  //       </Button>
  //     ),
  //   },
  //   {
  //     key: 2,
  //     label: (
  //       <Button
  //         onClick={onHelpClick}
  //         className="header-button"
  //         type="text"
  //         shape="circle"
  //         icon={<QuestionOutlined style={{ fontSize: '25px' }} />}
  //       >
  //         <a href={routes.CENTRO_AYUDA} target="_blank" rel="noreferrer">
  //           {'\u00A0'}
  //           Ayuda
  //         </a>
  //       </Button>
  //     ),
  //   },
  //   {
  //     key: 3,
  //     label: (
  //       <Button
  //         className="header-button"
  //         onClick={onLogOut}
  //         type="text"
  //         icon={<UserOutlined style={{ fontSize: '25px' }} />}
  //       >
  //         Cerrar sesi贸n
  //       </Button>
  //     ),
  //   },
  // ];

  // const onlyAuthItems = [
  //   {
  //     key: 1,
  //     label: (
  //       <Button
  //         className="header-button"
  //         type="text"
  //         icon={<UserOutlined style={{ fontSize: '25px' }} />}
  //       >
  //         {userInfo?.username}
  //       </Button>
  //     ),
  //   },
  //   {
  //     key: 2,
  //     label: (
  //       <Button
  //         className="header-button"
  //         onClick={onLogOut}
  //         type="text"
  //         icon={<UserOutlined style={{ fontSize: '25px' }} />}
  //       >
  //         Cerrar sesi贸n
  //       </Button>
  //     ),
  //   },
  // ];

  // Render Methods
  const renderRightItems = () => {
    if (authenticated) {
      return (
        // !isPhone && isAutenticated
        <Space>
          <Button
            type="text"
            id="idBotonAyuda"
            icon={<Icon component={HelpIcon}
            style={{ fontSize: '25px' }} />}
            size="large"
          >
            Centro de ayuda
          </Button>
          <Icon component={UserIcon} style={{ fontSize: '25px' }} />
          {/* <UserOutlined style={{ fontSize: '25px' }} /> */}
          <span>nombre.apellido</span>
          {/* <Button
            className="header-button"
            type="text"
            icon={<UserOutlined style={{ fontSize: '25px' }} />}
          >
            {userInfo?.username}
            {selectedRole && <span className="role">{` - ${selectedRole?.nombreRol}`}</span>}
          </Button> */}
          <div className="separator" />
          <Button
            className="logout"
            onClick={onLogOut}
            type="primary"
            size="large"
            icon={<CloseCircleFilled />}
          >
            Cerrar sesi贸n
          </Button>
        </ Space>
      );
    }
    return (
      <>
        <Tooltip title="Centro de Ayuda">
        <Button
            type="text"
            id="idBotonAyuda"
            icon={<Icon component={HelpIcon}
            style={{ fontSize: '25px' }} />}
            size="large"
          >
            Centro de ayuda
          </Button>
        </Tooltip>
        {/* <Button
          id="idBotonLogin"
          className="header-button"
          type="text"
          icon={<UserOutlined style={{ fontSize: '25px' }} />}
          onClick={onLogIn}
        >
          Inicia sesi贸n
        </Button> */}
      </>
    );
  };

  return (
    <>
      <Row data-testid="header" align="middle" id="mainHeader">
        <Col className="logo-name-container">
            <img src={Logo} alt="logo-ine" className='logo' />
            <h1>Sistema de Archivos Institucional</h1>
        </Col>
        <Col className='rigth-elements'>
            {renderRightItems()}
        </Col>
      </Row>
      {authenticated ? (
        <Row id="mainMenu">
          <Col span={24}>
            <MainMenu />
          </Col>
        </Row>
      ) : null}
      <Modal
        centered
        className="home-login-modal"
        open={isLoginVisible}
        closable
        footer={null}
        onCancel={onCloseModal}
        width={400}
        zIndex={5}
        destroyOnClose
      >
        <LoginForm onDismiss={onCloseModal} />
      </Modal>
      {/* <ComplaintModal complaint={selectedComplaint} setComplaint={setSelectedComplaint} /> */}
      <Drawer
        className="menu-drawer"
        title=" "
        placement="left"
        width={298}
        open={openDrawer}
        onClose={() => setOpenDrawer(false)}
      >
        {/* <NavBar
          orientation="vertical"
          idRol={selectedRole?.idRol}
          closeMenu={() => setOpenDrawer(false)}
        /> */}
      </Drawer>
    </>
  );
}

export { Header };
